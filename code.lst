Microsoft (R) Macro Assembler Version 14.38.33130.0	    11/13/24 20:44:39
code.asm						     Page 1 - 1


				; Wczytuje liczbę 16-tkową i wypisuje liczbę dziesiętną


				.686
				.model flat
				extern __write : PROC
				extern __read : PROC
				extern _ExitProcess@4 : PROC

				public _main

 00000000			.data
					; deklaracja tablicy do przechowywania wprowadzanych cyfr
 00000000  0000000C [			obszar db 12 dup (?)
	    00
	   ]
 0000000C 0000000A			dziesiec dd 10 ; mnożnik
 00000010 30 31 32 33 34		dekoder db '0123456789ABCDEF' ; tablica do konwersji na postać szesnastkową
	   35 36 37 38 39
	   41 42 43 44 45
	   46

 00000000			.code
 00000000				wyswietl_EAX PROC
 00000000  60					pusha ; zapisanie rejestrów ogólnych

 00000001  BE 0000000A				mov esi, 10 ; indeks w tablicy 'znaki'
 00000006  BB 0000000A				mov ebx, 10 ; dzielnik równy 10

 0000000B				konwersja:
 0000000B  BA 00000000				mov edx, 0 ; zerowanie starszej części dzielnej
 00000010  F7 F3				div ebx ; dzielenie przez 10, reszta w EDX, iloraz w EAX
 00000012  80 C2 30				add dl, 30H ; zamiana reszty z dzielenia na kod ASCII
 00000015  88 96 00000000 R			mov obszar [esi], dl; zapisanie cyfry w kodzie ASCII
 0000001B  4E					dec esi ; zmniejszenie indeksu
 0000001C  83 F8 00				cmp eax, 0 ; sprawdzenie czy iloraz = 0
 0000001F  75 EA				jne konwersja ; skok, gdy iloraz niezerowy
						
						 ; wypełnienie pozostałych bajtów spacjami i wpisanie znaków nowego wiersza
 00000021				wypeln:
 00000021  0B F6				or esi, esi
 00000023  74 0A				jz wyswietl ; skok, gdy ESI = 0
 00000025  C6 86 00000000 R			mov byte PTR obszar [esi], 20H ; kod spacji
	   20
 0000002C  4E					dec esi ; zmniejszenie indeksu
 0000002D  EB F2				jmp wypeln

 0000002F				wyswietl:
 0000002F  C6 05 00000000 R			mov byte PTR obszar [0], 0AH ; kod nowego wiersza
	   0A
 00000036  C6 05 0000000B R			mov byte PTR obszar [11], 0AH ; kod nowego wiersza
	   0A
						; wyświetlenie cyfr na ekranie
 0000003D  68 0000000C				push dword PTR 12 ; liczba wyświetlanych znaków
 00000042  68 00000000 R			push dword PTR OFFSET obszar ; adres wyśw. obszaru
 00000047  68 00000001				push dword PTR 1; numer urządzenia (ekran ma numer 1)
 0000004C  E8 00000000 E			call __write ; wyświetlenie liczby na ekranie
 00000051  83 C4 0C				add esp, 12 ; usunięcie parametrów ze stosu

 00000054  61					popa ; przywrócenie rejestrów ogólnych
 00000055  C3					ret ; powrót do miejsca wywołania
 00000056				wyswietl_EAX ENDP


 00000056				wczytaj_do_EAX_hex PROC
						; wczytywanie liczby szesnastkowej z klawiatury – liczba po
						; konwersji na postać binarną zostaje wpisana do rejestru EAX
						; po wprowadzeniu ostatniej cyfry należy nacisnąć klawisz
						; Enter
 00000056  53					push ebx
 00000057  51					push ecx
 00000058  52					push edx
 00000059  56					push esi
 0000005A  57					push edi
 0000005B  55					push ebp
						; rezerwacja 12 bajtów na stosie przeznaczonych na tymczasowe
						; przechowanie cyfr szesnastkowych wyświetlanej liczby
 0000005C  83 EC 0C				sub esp, 12 ; rezerwacja poprzez zmniejszenie ESP
 0000005F  8B F4				mov esi, esp ; adres zarezerwowanego obszaru pamięci
 00000061  68 0000000A				push dword PTR 10 ; max ilość znaków wczytyw. liczby
 00000066  56					push esi ; adres obszaru pamięci
 00000067  68 00000000				push dword PTR 0; numer urządzenia (0 dla klawiatury)
 0000006C  E8 00000000 E			call __read ; odczytywanie znaków z klawiatury
						; (dwa znaki podkreślenia przed read)
 00000071  83 C4 0C				add esp, 12 ; usunięcie parametrów ze stosu
 00000074  B8 00000000				mov eax, 0 ; dotychczas uzyskany wynik
 00000079				pocz_konw:
 00000079  8A 16				mov dl, [esi] ; pobranie kolejnego bajtu
 0000007B  46					inc esi ; inkrementacja indeksu
 0000007C  80 FA 0A				cmp dl, 10 ; sprawdzenie czy naciśnięto Enter
 0000007F  74 32				je gotowe ; skok do końca podprogramu
						; sprawdzenie czy wprowadzony znak jest cyfrą 0, 1, 2 , ..., 9
 00000081  80 FA 30				cmp dl, '0'
 00000084  72 F3				jb pocz_konw ; inny znak jest ignorowany
 00000086  80 FA 39				cmp dl, '9'
 00000089  77 0A				ja sprawdzaj_dalej
 0000008B  80 EA 30				sub dl, '0' ; zamiana kodu ASCII na wartość cyfry
 0000008E				dopisz:
 0000008E  C1 E0 04				shl eax, 4 ; przesunięcie logiczne w lewo o 4 bity
 00000091  0A C2				or al, dl ; dopisanie utworzonego kodu 4-bitowego
						; na 4 ostatnie bity rejestru EAX
 00000093  EB E4				jmp pocz_konw ; skok na początek pętli konwersji
						; sprawdzenie czy wprowadzony znak jest cyfrą A, B, ..., F
 00000095				sprawdzaj_dalej:
 00000095  80 FA 41				cmp dl, 'A'
 00000098  72 DF				jb pocz_konw ; inny znak jest ignorowany
 0000009A  80 FA 46				cmp dl, 'F'
 0000009D  77 05				ja sprawdzaj_dalej2
 0000009F  80 EA 37				sub dl, 'A' - 10 ; wyznaczenie kodu binarnego
 000000A2  EB EA				jmp dopisz

					; sprawdzenie czy wprowadzony znak jest cyfrą a, b, ..., f
 000000A4				sprawdzaj_dalej2:
 000000A4  80 FA 61				cmp dl, 'a'
 000000A7  72 D0				jb pocz_konw ; inny znak jest ignorowany
 000000A9  80 FA 66				cmp dl, 'f'
 000000AC  77 CB				ja pocz_konw ; inny znak jest ignorowany
 000000AE  80 EA 57				sub dl, 'a' - 10
 000000B1  EB DB				jmp dopisz

 000000B3				gotowe:
					; zwolnienie zarezerwowanego obszaru pamięci
 000000B3  83 C4 0C				add esp, 12
 000000B6  5D					pop ebp
 000000B7  5F					pop edi
 000000B8  5E					pop esi
 000000B9  5A					pop edx
 000000BA  59					pop ecx
 000000BB  5B					pop ebx
 000000BC  C3					ret
 000000BD				wczytaj_do_EAX_hex ENDP

 000000BD				_main PROC
						 ;wywołanie procedury wczytaj_do_EAX_hex
 000000BD  E8 FFFFFF94				call wczytaj_do_EAX_hex
						;wywołanie procedury wyswietl_EAX_hex
 000000C2  E8 FFFFFF39				call wyswietl_EAX

 000000C7  6A 00				push 0
 000000C9  E8 00000000 E			call _ExitProcess@4
 000000CE				_main ENDP

				END

Microsoft (R) Macro Assembler Version 14.38.33130.0	    11/13/24 20:44:39
code.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000020 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000CE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_main  . . . . . . . . . . . . .	P Near	 000000BD _TEXT	Length= 00000011 Public
wczytaj_do_EAX_hex . . . . . . .	P Near	 00000056 _TEXT	Length= 00000067 Public
  pocz_konw  . . . . . . . . . .	L Near	 00000079 _TEXT	
  dopisz . . . . . . . . . . . .	L Near	 0000008E _TEXT	
  sprawdzaj_dalej  . . . . . . .	L Near	 00000095 _TEXT	
  sprawdzaj_dalej2 . . . . . . .	L Near	 000000A4 _TEXT	
  gotowe . . . . . . . . . . . .	L Near	 000000B3 _TEXT	
wyswietl_EAX . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000056 Public
  konwersja  . . . . . . . . . .	L Near	 0000000B _TEXT	
  wypeln . . . . . . . . . . . .	L Near	 00000021 _TEXT	
  wyswietl . . . . . . . . . . .	L Near	 0000002F _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_ExitProcess@4 . . . . . . . . .	L Near	 00000000 FLAT	External
__read . . . . . . . . . . . . .	L Near	 00000000 FLAT	External
__write  . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dekoder  . . . . . . . . . . . .	Byte	 00000010 _DATA	
dziesiec . . . . . . . . . . . .	DWord	 0000000C _DATA	
obszar . . . . . . . . . . . . .	Byte	 00000000 _DATA	

	   0 Warnings
	   0 Errors
