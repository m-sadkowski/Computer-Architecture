Microsoft (R) Macro Assembler Version 14.38.33130.0	    11/14/24 21:51:38
code.asm						     Page 1 - 1


				; Program zawiera wszystkie funkcje do wczytywania i wyswietlania rejestru EAX

				.686
				.model flat
				extern __write : PROC
				extern __read : PROC
				extern _ExitProcess@4 : PROC

				public _main

 00000000			.data
 00000000  00000024 [			obszar db 36 dup (?) ; deklaracja tablicy do przechowywania wprowadzanych cyfr
	    00
	   ]
 00000024 0000000A			dziesiec dd 10 ; stała do mnożenia przez 10
 00000028  00000024 [			wejscie db 36 dup (?) ; deklaracja tablicy do przechowywania wprowadzanych cyfr
	    00
	   ]

 00000000			.code
 00000000				wyswietl_96bit PROC
 00000000  60					pusha ; zapisanie rejestrów ogólnych

 00000001  B3 03				mov bl, 3 ; liczba rejestrów (3 * 32 bity = 96 bitów)
 00000003  B7 0A				mov bh, 10

 00000005  51					push ecx
 00000006  52					push edx

 00000007  BE 0000001E				mov esi, 30 ; indeks w tablicy 'obszar'
 0000000C  BF 0000000A				mov edi, 10 ; dzielnik równy 10

 00000011				konwersja:
 00000011  BA 00000000				mov edx, 0 ; zerowanie starszej części dzielnej
 00000016  F7 F7				div edi ; dzielenie przez 10, reszta w EDX, iloraz w EAX
 00000018  80 C2 30				add dl, 30H ; zamiana reszty z dzielenia na kod ASCII
 0000001B  88 96 00000000 R			mov obszar [esi], dl; zapisanie cyfry w kodzie ASCII
 00000021  4E					dec esi ; zmniejszenie indeksu
 00000022  FE CF				dec bh
 00000024  83 F8 00				cmp eax, 0 ; sprawdzenie czy iloraz = 0
 00000027  75 E8				jne konwersja ; skok, gdy iloraz niezerowy

 00000029  80 FF 00				cmp bh, 0
 0000002C  74 11				je skip

 0000002E				dodaj_zera:
 0000002E  80 FB 01				cmp bl, 1
 00000031  74 0C				je skip
 00000033  C6 86 00000000 R			mov byte PTR obszar [esi], 30H ; wpisanie zera
	   30
 0000003A  4E					dec esi ; zmniejszenie indeksu
 0000003B  FE CF				dec bh
 0000003D  75 EF				jnz dodaj_zera

 0000003F				skip:
 0000003F  58					pop eax
 00000040  B7 0A				mov bh, 10
 00000042  FE CB				dec bl
 00000044  75 CB				jnz konwersja
						
						 ; wypełnienie pozostałych bajtów spacjami i wpisanie znaków nowego wiersza
 00000046				wypeln:
 00000046  0B F6				or esi, esi ; zamiast cmp esi, 0 ; sprawdzenie czy ESI = 0 jeśli tak to skok
 00000048  74 0A				jz wyswietl ; skok, gdy ESI = 0
 0000004A  C6 86 00000000 R			mov byte PTR obszar [esi], 20H ; kod spacji
	   20
 00000051  4E					dec esi ; zmniejszenie indeksu
 00000052  EB F2				jmp wypeln

 00000054				wyswietl:
 00000054  C6 05 00000000 R			mov byte PTR obszar [0], 0AH ; kod nowego wiersza
	   0A
 0000005B  C6 05 00000023 R			mov byte PTR obszar [35], 0AH ; kod nowego wiersza
	   0A
						; wyświetlenie cyfr na ekranie
 00000062  68 00000024				push dword PTR 36 ; liczba wyświetlanych znaków
 00000067  68 00000000 R			push dword PTR OFFSET obszar ; adres wyśw. obszaru
 0000006C  68 00000001				push dword PTR 1; numer urządzenia (ekran ma numer 1)
 00000071  E8 00000000 E			call __write ; wyświetlenie liczby na ekranie
 00000076  83 C4 0C				add esp, 12 ; usunięcie parametrów ze stosu

 00000079  61					popa ; przywrócenie rejestrów ogólnych
 0000007A  C3					ret ; powrót do miejsca wywołania
 0000007B				wyswietl_96bit ENDP

 0000007B				wczytaj_96bit PROC ; edx:ecx:eax rejestr 96 bitowy
						; zapisanie rejestrów ogólnych na stosie
 0000007B  53					push ebx
 0000007C  56					push esi
 0000007D  57					push edi
 0000007E  55					push ebp

 0000007F  B8 00000000				mov eax, 0
 00000084  B9 00000000				mov ecx, 0
 00000089  BA 00000000				mov edx, 0

						; max ilość znaków wczytywanej liczby
 0000008E  68 0000001E				push dword PTR 30
 00000093  68 00000028 R			push dword PTR OFFSET wejscie ; adres obszaru pamięci
 00000098  68 00000000				push dword PTR 0; numer urządzenia (0 dla klawiatury)
 0000009D  E8 00000000 E			call __read ; odczytywanie znaków z klawiatury
						; (dwa znaki podkreślenia przed read)
 000000A2  83 C4 0C				add esp, 12 ; usunięcie parametrów ze stosu
						; bieżąca wartość przekształcanej liczby przechowywana jest
						; w rejestrze EAX; przyjmujemy 0 jako wartość początkową
 000000A5  BF 00000000 R			mov edi, OFFSET obszar ; adres obszaru ze znakami

 000000AA				pobieraj_znaki:
 000000AA  8A 1F				mov bl, [edi] ; pobranie kolejnej cyfry w kodzie ASCII
 000000AC  47					inc edi ; zwiększenie indeksu
 000000AD  80 FB 0A				cmp bl,10 ; sprawdzenie czy naciśnięto Enter
 000000B0  74 10				je byl_enter ; skok, gdy naciśnięto Enter
 000000B2  80 EB 30				sub bl, 30H ; zamiana kodu ASCII na wartość cyfry
 000000B5  0F B6 DB				movzx ebx, bl ; przechowanie wartości cyfry w
						; rejestrze EBX
						; mnożenie wcześniej obliczonej wartości razy 10
 000000B8  F7 25 00000024 R			mul dword PTR dziesiec
 000000BE  03 C3				add eax, ebx ; dodanie ostatnio odczytanej cyfry
 000000C0  EB E8				jmp pobieraj_znaki ; skok na początek pętli

 000000C2				byl_enter:
 000000C2  5D					pop ebp
 000000C3  5F					pop edi
 000000C4  5E					pop esi
 000000C5  5B					pop ebx
 000000C6  C3					ret ; powrót do miejsca wywołania
 000000C7				wczytaj_96bit ENDP

 000000C7				_main PROC
 000000C7  B9 0000022B				mov ecx, 555
 000000CC  BA FFFFFFFF				mov edx, 0FFFFFFFFh
 000000D1  B8 000001BC				mov eax, 444
 000000D6  E8 FFFFFF25				call wyswietl_96bit

 000000DB  6A 00				push 0
 000000DD  E8 00000000 E			call _ExitProcess@4
 000000E2				_main ENDP

				END
Microsoft (R) Macro Assembler Version 14.38.33130.0	    11/14/24 21:51:38
code.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 0000004C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000E2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_main  . . . . . . . . . . . . .	P Near	 000000C7 _TEXT	Length= 0000001B Public
wczytaj_96bit  . . . . . . . . .	P Near	 0000007B _TEXT	Length= 0000004C Public
  pobieraj_znaki . . . . . . . .	L Near	 000000AA _TEXT	
  byl_enter  . . . . . . . . . .	L Near	 000000C2 _TEXT	
wyswietl_96bit . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007B Public
  konwersja  . . . . . . . . . .	L Near	 00000011 _TEXT	
  dodaj_zera . . . . . . . . . .	L Near	 0000002E _TEXT	
  skip . . . . . . . . . . . . .	L Near	 0000003F _TEXT	
  wypeln . . . . . . . . . . . .	L Near	 00000046 _TEXT	
  wyswietl . . . . . . . . . . .	L Near	 00000054 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_ExitProcess@4 . . . . . . . . .	L Near	 00000000 FLAT	External
__read . . . . . . . . . . . . .	L Near	 00000000 FLAT	External
__write  . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dziesiec . . . . . . . . . . . .	DWord	 00000024 _DATA	
obszar . . . . . . . . . . . . .	Byte	 00000000 _DATA	
wejscie  . . . . . . . . . . . .	Byte	 00000028 _DATA	

	   0 Warnings
	   0 Errors
